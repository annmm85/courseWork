<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | Этот параметр определяет "драйвер" сеанса по умолчанию, который будет использоваться в
    | запросах. По умолчанию мы будем использовать облегченный собственный драйвер, но
    | вы можете указать любой из других замечательных драйверов, представленных здесь.    |
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
| Здесь вы можете указать количество минут, в течение которых вы хотите, чтобы сеанс
    | оставался незанятым до его истечения. Если вы хотите, чтобы они
    | истекали немедленно после закрытия браузера, установите этот параметр.    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => false,

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | Эта опция позволяет вам легко указать, что все данные вашего сеанса
    | должны быть зашифрованы перед сохранением. Все шифрования будут выполняться Laravel автоматически
    |, и вы сможете использовать сеанс как обычно.    |
    */

    'encrypt' => false,

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | При использовании встроенного драйвера сеанса нам необходимо указать местоположение, в котором могут храниться файлы сеанса
    |. Для вас установлено значение по умолчанию, но может быть указано другое
    | местоположение. Это необходимо только для файловых сеансов.    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | При использовании драйверов сеансов "database" или "redis" вы можете указать
    | соединение, которое должно использоваться для управления этими сеансами. Это должно
    | соответствовать подключению в параметрах конфигурации вашей базы данных.    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | При использовании драйвера сеанса "база данных" вы можете указать таблицу, которую мы
    | должны использовать для управления сеансами. Конечно, разумным будет использовать значение по умолчанию
    |, предоставленное для вас; однако вы можете изменить его по мере необходимости.    |
    */

    'table' => 'sessions',

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | При использовании одного из бэкендов фреймворка, управляемых кэшированием сеансов, вы можете
    | указать хранилище кэша, которое следует использовать для этих сеансов. Это значение
    | должно совпадать с одним из настроенных "хранилищ" кэша приложения.    |
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Некоторые драйверы сеанса должны вручную проверить свое хранилище, чтобы получить
    | удалить старые сеансы из хранилища. Вот шансы на то, что это произойдет
    | происходит по заданному запросу. По умолчанию шансы равны 2 из 100.    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Здесь вы можете изменить имя файла cookie, используемого для идентификации сеанса
    | экземпляра по идентификатору. Указанное здесь имя будет использоваться каждый раз, когда
    | платформа создает новый файл cookie сеанса для каждого драйвера.    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | Путь к файлу cookie сеанса определяет путь, по которому файл cookie будет
    | считаться доступным. Как правило, это будет корневой путь
    | вашего приложения, но вы можете изменить его при необходимости.    |
    */

    'path' => '/',

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | Здесь вы можете изменить домен файла cookie, используемого для идентификации сеанса
    | в вашем приложении. Это определит, для каких доменов в вашем приложении доступен файл cookie
    |. По умолчанию установлено разумное значение.    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
| Если установить для этого параметра значение true, сессионные файлы cookie будут отправляться только обратно
    | на сервер, если браузер имеет HTTPS-соединение. Это сохранит
    | файл cookie не будет отправлен вам, если это невозможно сделать безопасным образом.    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
| Если присвоить этому значению значение true, JavaScript не сможет получить доступ к
| значению файла cookie, и файл cookie будет доступен только через
    | протокол HTTP. При необходимости вы можете изменить этот параметр.    |
    */

    'http_only' => true,

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | Этот параметр определяет, как ведут себя ваши файлы cookie при межсайтовых запросах
    | и может использоваться для предотвращения атак CSRF. По умолчанию мы
    | установим для этого параметра значение "lax", поскольку это безопасное значение по умолчанию.    |
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => 'lax',

];
